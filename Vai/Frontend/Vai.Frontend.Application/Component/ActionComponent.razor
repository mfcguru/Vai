@inject IGetAllProcessesCommand command
@inject IJSRuntime JSRuntime

@if (loading == false)
{
    <Vai.Frontend.Application.ReusableComponents.Table
        List="processes"
        GetAllProcesses="GetAllProcesses"
        SetPage="SetPage"
        SetPageSize="SetPageSize"
        SetCurrentPage="SetCurrentPage"
        SetPaginationButtonSlideLeft="SetPaginationButtonSlideLeft"
        CheckTableDivOverflow="HandleButtonSlideLeft"
        title="@title"
        paginationDivId="@paginationDivId"
        page="page"
        pageSize="pageSize"
        currentPage="currentPage"
        totalPages="totalPages"
        itemsCount="processesCount"
        paginationButtonsSlideLeftState="paginationButtonsSlideLeftState"
        paginationButtonsSlideRightState="paginationButtonsSlideRightState"
        lastPages="lastPages"
        selectedId="selectedId"
    >
        <TableContent>
            <table class="width-max">
                <thead class="bg-white">
                    <tr>
                        <th scope="col" style="display: flex">
                            <input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" @onclick="checkAllBoxes" /> Client
                        </th>
                        <th scope="col">Robot</th>
                        <th scope="col">Task Description</th>
                        <th scope="col">Start Time</th>
                        <th scope="col">Elapsed Duration</th>
                        <th scope="col">Status</th>
                        <th scope="col">Efficiency</th>
                        <th scope="col">Priority</th>
                    </tr>
                </thead>
                <tbody class="tbody">
                    @foreach (var process in processes.Select((data, i) => new { i, data }))
                    {
                        <tr>
                            <td style="display: flex">
                                <input type="checkbox"
                                       class="form-check mr-2"
                                       style="margin-top: 5px;"
                                       checked="@processCheckboxes[process.i]"
                                       @onclick="() => selectProcess(process.i, process.data.ProcessId)"
                                 /> @process.data.Client
                            </td>
                            <td>@process.data.Robot</td>
                            <td class="task-descr">@(process.data.TaskDescription.Length > 25 ? process.data.TaskDescription.Substring(0, 25) + "..." : process.data.TaskDescription)</td>
                            <td>@process.data.StartTime</td>
                            <td>@process.data.ElapsedTime</td>
                            <td><span class="status">@(process.data.Status.Length > 10 ? process.data.Status.Substring(0, 10) + "..." : process.data.Status)</span></td>
                            <td><span class="efficiency">@(process.data.Efficiency.Length > 10 ? process.data.Efficiency.Substring(0, 10) + "..." : process.data.Efficiency)</span></td>
                            <td><span class="priority">@(process.data.Priority.Length > 10 ? process.data.Priority.Substring(0, 10) + "..." : process.data.Priority)</span></td>
                        </tr>
                        }
                </tbody>
            </table>
        </TableContent>
    </Vai.Frontend.Application.ReusableComponents.Table>
}
else
{
    <div class="width-max bg-white py-5 text-center row-border" style="border-radius: 5px;color: #d0d0d0;">
        <h6>Loading...</h6>
    </div>
}

@code {
    private List<GetAllProcessesCommandModel.ProcessAttribute> processes = new List<GetAllProcessesCommandModel.ProcessAttribute>();
    private string title { get; set; } = "ACTIONS";
    private string paginationDivId { get; set; } = "actionPaginationDiv";
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 5;
    private int currentPage { get; set; }
    private int totalPages { get; set; }
    private bool paginationButtonsSlideLeftState { get; set; }
    private bool paginationButtonsSlideRightState { get; set; }
    private int lastPages { get; set; }
    private bool loading { get; set; } = true;
    private int processesCount;
    private bool[] processCheckboxes;
    private int selectedId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("SetActionReference", lDotNetReference);

        await GetAllProcesses();
        await Task.Run(() => processCheckboxes = new bool[processesCount]);
        var task = Task.Run(() => HandleButtonSlideLeft());
        if (loading == false && task.Wait(TimeSpan.FromSeconds(1)))
        {
            await HandleButtonSlideLeft();
        }
    }

    [JSInvokable("HandleButtonSlideLeft")]
    public async Task HandleButtonSlideLeft()
    {
        var state = await JSRuntime.InvokeAsync<bool>("checkTablePaginationScrollLeft", paginationDivId);
        await Task.Run(() =>
        {
            paginationButtonsSlideLeftState = state;
        });

        if (paginationButtonsSlideLeftState)
        {
            lastPages = 3;
        }
        else
        {
            lastPages = 0;
        }
        StateHasChanged();
    }

    private async Task HandleButtonSlideRight()
    {
        await Task.Run(() =>
        {
            if (page > 1)
            {
                paginationButtonsSlideRightState = true;
            }
            else
            {
                paginationButtonsSlideRightState = false;
            }
        });
        StateHasChanged();
    }

    private async void SetPaginationButtonSlideLeft()
    {
        await Task.Run(() =>
        {
            paginationButtonsSlideLeftState = false;
            lastPages = 0;
        });
        StateHasChanged();
    }

    private async Task SetPage(int pageValue)
    {
        await Task.Run(() =>
        {
            page = pageValue;
            StateHasChanged();
        });

        await HandleButtonSlideRight();
        await GetAllProcesses();
    }

    private async Task SetPageSize(int pageSizeValue)
    {
        await Task.Run(() =>
        {
            pageSize = pageSizeValue;
            StateHasChanged();
        });
        await GetAllProcesses();
    }
    private async Task SetCurrentPage(int currentPageValue)
    {
        await Task.Run(() =>
        {
            currentPage = currentPageValue;
            StateHasChanged();
        });
        await GetAllProcesses();
    }

    private async Task GetAllProcesses()
    {
        var result = await command.Execute(new GetAllProcessesCommandParams { Page = page, PageSize = pageSize });
        await Task.Run(() =>
        {
            processes = result.Data.Processes;
            currentPage = result.Data.CurrentPage;
            totalPages = result.Data.TotalPages;
            processesCount = result.Data.Count;
        });
        loading = false;
    }

    private async Task checkAllBoxes()
    {
        await Task.Run(() =>
        {
            for (var i = 0; i < processesCount; i++)
            {
                processCheckboxes[i] = !processCheckboxes[i];
            }
        });
    }

    private void selectProcess(int selectedIndex, int selectedProcessId)
    {
        processCheckboxes[selectedIndex] = !processCheckboxes[selectedIndex];
        selectedId = selectedProcessId;
    }
}
