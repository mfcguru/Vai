@inject IGetAllBacklogItemsCommand command

<div class="flex bg-white row-border-top mt-3">
    <div class="title">BACKLOGS</div>
    <div class="display-text">
        <span style="margin-top: 10px !important">Displaying @pageSize of a total 236 processes</span>
    </div>
    <div class="button-option">
        <button class="button icon float-right">Actions</button>
    </div>
    <div class="sort-by icon">
        Sort by:
        <span class="sort-by-text">Relevance</span>
    </div>
    <div class="option">...</div>
</div>
<div class="row-border" style="overflow-x:auto;width: 100%;">
    <table style="width: 100%">
        <thead class="bg-white">
            <tr>
                <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                <th scope="col">Robot</th>
                <th scope="col">Task Description</th>
            </tr>
        </thead>
        <tbody class="tbody">
            @foreach (var backlogItem in backlogItems)
            {
                <tr>
                    <td style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> @backlogItem.Client</td>
                    <td>@backlogItem.Robot</td>
                    <td class="task-descr">@(backlogItem.TaskDescription.Length > 35 ? backlogItem.TaskDescription.Substring(0, 35) + "..." : backlogItem.TaskDescription)</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="flex bg-white row-border-bottom" style="overflow: hidden;">
    <div class="show-results icon">
        Show: <span>@pageSize Results </span>
    </div>
    <div class="flex pagination-buttons justify-content-center" style="overflow: hidden;">
        <button class="btn ml-1 page-btn page-btn-left" @onclick="PaginateLeft"></button>
        <div class="all-buttons">
            @for (var i = 1; i < totalPages - 3; i++)
            {
                var pageIndex = i;
                <button class="btn page-btn
                    @(pageIndex == 1 ? "": "ml-1")
                    @(currentPage == i ? "page-btn-active" : "")"
                        style="margin-left: @marginLeftPagination;"
                        @onclick="() => PaginatePage(pageIndex)">
                    @i
                </button>
            }
        </div>
        <span class="ml-1" style="color: #adadad;">...</span>
        @for (var i = totalPages - 3; i < totalPages; i++)
        {
            var pageIndex = i;
            <button class="btn page-btn
                @(currentPage == i ? "page-btn-active" : "")"
                    @onclick="() => PaginatePage(pageIndex)">
                @i
            </button>
        }
        <button class="btn ml-1 page-btn" @onclick="PaginateRight">></button>
    </div>
</div>

@code {
    private List<GetAllBacklogItemsCommandModel> backlogItems = new List<GetAllBacklogItemsCommandModel>();
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 3;
    private int currentPage { get; set; }
    private int totalPages { get; set; }
    private string marginLeftPagination { get; set; } = "0px";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await command.Execute(new GetAllBacklogItemsCommandParams { Page = page, PageSize = pageSize });
        backlogItems = result.Data;
        currentPage = result.CurrentPage;
        totalPages = 25;
    }

    private async void PaginatePage(int pageIndex)
    {
        await Task.Run(() =>
        {
            page = pageIndex;
            PaginationButtonsChanged(page);
            GetAllProcesses();
        });
    }

    private async void PaginateRight()
    {
        await Task.Run(() =>
        {
            if (currentPage < totalPages)
            {
                page = currentPage + 1;
                PaginationButtonsChanged(page);
                GetAllProcesses();
            }
        });
    }

    private async void PaginateLeft()
    {
        await Task.Run(() =>
        {
            if (currentPage > 0)
            {
                page = currentPage - 1;
                PaginationButtonsChanged(page);
                GetAllProcesses();
            }
        });
    }

    private async void PaginationButtonsChanged(int pageIndex)
    {
        await Task.Run(() =>
        {
            var marginLeftValue = pageIndex * 29 - 29;
            marginLeftPagination = "-" + marginLeftValue + "px";
        });
    }

    private async void GetAllProcesses()
    {
        var result = await command.Execute(new GetAllBacklogItemsCommandParams { Page = page, PageSize = pageSize });
        backlogItems = result.Data;
        currentPage = result.CurrentPage;
        totalPages = result.TotalPages;
    }
}
