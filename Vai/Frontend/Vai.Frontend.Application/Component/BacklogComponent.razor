@inject IGetAllBacklogItemsCommand command
@inject IJSRuntime JSRuntime

@if (loading == false)
{
    <Vai.Frontend.Application.ReusableComponents.Table List="backlogItems"
                                                       SetPage="SetPage"
                                                       SetPageSize="SetPageSize"
                                                       SetCurrentPage="SetCurrentPage"
                                                       SetPaginationButtonSlideLeft="SetPaginationButtonSlideLeft"
                                                       CheckTableDivOverflow="HandleButtonSlideLeft"
                                                       title="@title"
                                                       paginationDivId="@paginationDivId"
                                                       page="page"
                                                       pageSize="pageSize"
                                                       currentPage="currentPage"
                                                       totalPages="totalPages"
                                                       paginationButtonsSlideLeftState="paginationButtonsSlideLeftState"
                                                       paginationButtonsSlideRightState="paginationButtonsSlideRightState"
                                                       lastPages="lastPages">
        <TableContent>
            <table class="width-max">
                <thead class="bg-white">
                    <tr>
                        <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                        <th scope="col">Robot</th>
                        <th scope="col">Task Description</th>
                    </tr>
                </thead>
                <tbody class="tbody">
                    @foreach (var item in backlogItems)
                    {
                        <tr>
                            <td style="display: flex">
                                <input type="checkbox"
                                       class="form-check mr-2"
                                       style="margin-top: 5px;"
                                       id="backlog-checkbox-@item.ProcessId" /> @item.Client
                                </td>
                                <td>@item.Robot</td>
                                <td class="task-descr">@(item.TaskDescription.Length > 35 ? item.TaskDescription.Substring(0, 35) + "..." : item.TaskDescription)</td>
                            </tr>
                        }
                </tbody>
            </table>
        </TableContent>
    </Vai.Frontend.Application.ReusableComponents.Table>
}
else
{
    <div class="width-max bg-white py-5 text-center row-border" style="border-radius: 5px;">
        <h6>Loading...</h6>
    </div>
}

@code {
    private List<GetAllBacklogItemsCommandModel> backlogItems = new List<GetAllBacklogItemsCommandModel>();
    private string title { get; set; } = "BACKLOGS";
    private string paginationDivId { get; set; } = "backlogPaginationDiv";
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 7;
    private int currentPage { get; set; }
    private int totalPages { get; set; }
    private bool paginationButtonsSlideLeftState { get; set; }
    private bool paginationButtonsSlideRightState { get; set; }
    private int lastPages { get; set; }
    private bool loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("SetBacklogReference", lDotNetReference);

        await GetAllBacklogItems();
        var task = Task.Run(() => HandleButtonSlideLeft());
        if (loading == false && task.Wait(TimeSpan.FromSeconds(1)))
        {
            await HandleButtonSlideLeft();
        }
    }

    [JSInvokable("HandleButtonSlideLeft")]
    public async Task HandleButtonSlideLeft()
    {
        var state = await JSRuntime.InvokeAsync<bool>("checkTablePaginationScrollLeft", paginationDivId);
        await Task.Run(() =>
        {
            paginationButtonsSlideLeftState = state;
        });

        if (paginationButtonsSlideLeftState)
        {
            lastPages = 3;
        }
        else
        {
            lastPages = 0;
        }
        StateHasChanged();
    }

    private async Task HandleButtonSlideRight()
    {
        await Task.Run(() =>
        {
            if (page > 1)
            {
                paginationButtonsSlideRightState = true;
            }
            else
            {
                paginationButtonsSlideRightState = false;
            }
        });
        StateHasChanged();
    }

    private async Task SetPaginationButtonSlideLeft()
    {
        await Task.Run(() =>
        {
            paginationButtonsSlideLeftState = false;
            lastPages = 0;
        });
    }

    private async Task SetPage(int newPage)
    {
        await Task.Run(() =>
        {
            page = newPage;
            StateHasChanged();
        });
        await HandleButtonSlideRight();
        await GetAllBacklogItems();
    }

    private async Task SetPageSize(int newPageSize)
    {
        await Task.Run(() =>
        {
            pageSize = newPageSize;
            StateHasChanged();
        });
        await GetAllBacklogItems();
    }
    private async Task SetCurrentPage(int newCurrentPage)
    {
        await Task.Run(() =>
        {
            currentPage = newCurrentPage;
            StateHasChanged();
        });
        await GetAllBacklogItems();
    }

    private async Task GetAllBacklogItems()
    {
        var result = await command.Execute(new GetAllBacklogItemsCommandParams { Page = page, PageSize = pageSize });
        await Task.Run(() =>
        {
            backlogItems = result.Data;
            currentPage = result.CurrentPage;
            totalPages = result.TotalPages;
        });
        loading = false;
    }
}
