@inject IGetAllBacklogItemsCommand command
@inject IJSRuntime JSRuntime

@if(loading == true) 
{
    <Vai.Frontend.Application.ReusableComponents.Table 
        InvokePage="SetPage" 
        InvokePageSize="SetPageSize"
        InvokeCurrentPage="SetCurrentPage"
        items="backlogItems"
        title="@title"
        paginationDivId="@paginationDivId" 
        page="page"
        pageSize="pageSize"
        currentPage="currentPage"
        totalPages="totalPages"
    />
}

@code {
    private List<GetAllBacklogItemsCommandModel> backlogItems = new List<GetAllBacklogItemsCommandModel>();
    private string title { get; set; } = "BACKLOGS";
    private string paginationDivId { get; set; } = "backlogPaginationDiv";
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 5;
    private int currentPage { get; set; }
    private int totalPages { get; set; }
    private bool loading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetAllProcesses();
    }

    private async Task SetPage(int pageValue)
    {
        await Task.Run(() =>
        {
            page = pageValue;
            StateHasChanged();
        });
        await GetAllProcesses();
    }

    private async Task SetPageSize(int pageSizeValue)
    {
        await Task.Run(() =>
        {
            pageSize = pageSizeValue;
            StateHasChanged();
        });
        await GetAllProcesses();
    }
    private async Task SetCurrentPage(int currentPageValue)
    {
        await Task.Run(() =>
        {
            currentPage = currentPageValue;
            StateHasChanged();
        });
        await GetAllProcesses();
    }

    private async Task GetAllProcesses()
    {
        var result = await command.Execute(new GetAllBacklogItemsCommandParams { Page = page, PageSize = pageSize });
        await Task.Run(() =>
        {
            backlogItems = result.Data;
            currentPage = result.CurrentPage;
            totalPages = result.TotalPages;
        });
        loading = true;

    }
}
