@inject IGetAllBacklogItemsCommand command
@inject IJSRuntime JSRuntime

@if(loading == false) 
{
    <Vai.Frontend.Application.ReusableComponents.Table 
        SetPage="SetPage" 
        SetPageSize="SetPageSize"
        SetCurrentPage="SetCurrentPage"
        CheckTableDivOverflow="HandleButtonSlideLeft"
        items="backlogItems"
        title="@title"
        paginationDivId="@paginationDivId" 
        page="page"
        pageSize="pageSize"
        currentPage="currentPage"
        totalPages="totalPages"
        paginationDivOverflow="paginationDivOverflow"
        paginationButtonsSlideLeftState="paginationButtonsSlideLeftState"
        paginationButtonsSlideRightState="paginationButtonsSlideRightState"
        lastPages="lastPages"
    />
}

@code {
    private List<GetAllBacklogItemsCommandModel> backlogItems = new List<GetAllBacklogItemsCommandModel>();
    private string title { get; set; } = "BACKLOGS";
    private string paginationDivId { get; set; } = "backlogPaginationDiv";
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 7;
    private int currentPage { get; set; }
    private int totalPages { get; set; }
    private bool paginationDivOverflow { get; set; }
    private bool paginationButtonsSlideLeftState { get; set; }
    private bool paginationButtonsSlideRightState { get; set; }
    private int lastPages { get; set; }
    private bool loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("SetBacklogReference", lDotNetReference);

        await GetAllBacklogItems();
        if(loading == true)
        {
            await HandleButtonSlideLeft();
        }
    }

    [JSInvokable("HandleButtonSlideLeft")]
    public async Task HandleButtonSlideLeft()
    {
        var state = await JSRuntime.InvokeAsync<bool>("checkTablePaginationScrollLeft", paginationDivId);
        await Task.Run(() =>
        {
            paginationButtonsSlideLeftState = state;
        });

        if (paginationButtonsSlideLeftState)
        {
            lastPages = 3;
        }
        else
        {
            lastPages = 0;
        }
        StateHasChanged();
    }

    private async Task HandleButtonSlideRight()
    {
        await Task.Run(() =>
        {
            if (page > 1)
            {
                paginationButtonsSlideRightState = true;
            }
            else
            {
                paginationButtonsSlideRightState = false;
            }
        });
        StateHasChanged();
    }

    private async Task SetPage(int newPage)
    {
        await Task.Run(() =>
        {
            page = newPage;
            StateHasChanged();
        });
        await HandleButtonSlideRight();
        await GetAllBacklogItems();
    }

    private async Task SetPageSize(int newPageSize)
    {
        await Task.Run(() =>
        {
            pageSize = newPageSize;
            StateHasChanged();
        });
        await GetAllBacklogItems();
    }
    private async Task SetCurrentPage(int newCurrentPage)
    {
        await Task.Run(() =>
        {
            currentPage = newCurrentPage;
            StateHasChanged();
        });
        await GetAllBacklogItems();
    }

    private async Task GetAllBacklogItems()
    {
        var result = await command.Execute(new GetAllBacklogItemsCommandParams { Page = page, PageSize = pageSize });
        await Task.Run(() =>
        {
            backlogItems = result.Data;
            currentPage = result.CurrentPage;
            totalPages = result.TotalPages;
        });
        loading = false;
    }
}
