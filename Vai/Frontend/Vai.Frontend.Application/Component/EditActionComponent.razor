@inject IGetProcessCommand getProcess
@inject IEditProcessCommand editProcess

<h3>EditActionComponent</h3>

<TextEdit @bind-Text="process.Client" />
<TextEdit @bind-Text="process.Robot" />
<TextEdit @bind-Text="process.TaskDescription" />
<TextEdit @bind-Text="process.Efficiency" />
<TextEdit @bind-Text="process.Status" />
<TextEdit @bind-Text="process.Priority" />

<Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>
<Button Color="Color.Primary" Clicked="@SaveChanges">Save Changes</Button>


@code {
    [Parameter]
    public EventCallback HideModal { get; set; }
    [Parameter]
    public EventCallback GetAllProcesses { get; set; }
    [Parameter]
    public int selectedId { get; set; }

    private GetProcessCommandModel process = new GetProcessCommandModel();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async Task GetProcess()
    {
        var result = await getProcess.Execute(selectedId);
        await Task.Run(() =>
        {
            process = result.Data;
        });
    }

    private async Task CloseModal()
    {
        await HideModal.InvokeAsync();
    }

    private async Task SaveChanges()
    {
        var model = new EditProcessCommandParams
        {
            ProcessId = selectedId,
            Client = process.Client,
            Robot = process.Robot,
            TaskDescription = process.TaskDescription,
            StartTime = process.StartTime,
            ElapsedTime = process.ElapsedTime,
            Efficiency = process.Efficiency,
            Status = process.Status,
            Priority = process.Priority
        };

        await editProcess.Execute(model);

        await CloseModal();

        await GetAllProcesses.InvokeAsync();
    }
}
