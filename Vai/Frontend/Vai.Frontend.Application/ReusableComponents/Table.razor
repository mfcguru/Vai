@inject IGetAllBacklogItemsCommand command
@inject IJSRuntime JSRuntime

<div class="flex bg-white row-border-top">
    <div class="title">@title</div>
    <div class="display-text">
        <span style="margin-top: 10px !important">Displaying @pageSize of a total 236 processes</span>
    </div>
    @if (title == "ACTIONS")
    {
        <div class="button-option">
            <button class="button icon float-right">Actions</button>
        </div>
    }
    <div class="sort-by icon">
        Sort by:
        <span class="sort-by-text">Relevance</span>
    </div>
    <div class="option">...</div>
</div>
@if (title == "BACKLOGS")
{
    <div class="row-border overflow-auto width-max">
        <table class="width-max">
            <thead class="bg-white">
                <tr>
                    <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                    <th scope="col">Robot</th>
                    <th scope="col">Task Description</th>
                </tr>
            </thead>
            <tbody class="tbody">
                @foreach (var item in items)
                {
                    <tr>
                        <td style="display: flex">
                            <input type="checkbox" 
                                   class="form-check mr-2" 
                                   style="margin-top: 5px;" 
                                   id="backlog-checkbox-@item.ProcessId" 
                                   @onclick='() => CheckCheckbox("backlog-checkbox-", item.ProcessId)'
                            /> @item.Client
                        </td>
                        <td>@item.Robot</td>
                        <td class="task-descr">@(item.TaskDescription.Length > 35 ? item.TaskDescription.Substring(0, 35) + "..." : item.TaskDescription)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
<div class="row-border overflow-auto width-max">
    <table class="width-max">
        <thead class="bg-white">
            <tr>
                <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                <th scope="col">Robot</th>
                <th scope="col">Task Description</th>
                <th scope="col">Start Time</th>
                <th scope="col">Elapsed Duration</th>
                <th scope="col">Status</th>
                <th scope="col">Efficiency</th>
                <th scope="col">Priority</th>
            </tr>
        </thead>
        <tbody class="tbody">
            @foreach (var process in processes)
            {
            <tr>
                <td style="display: flex">
                    <input type="checkbox" 
                           class="form-check mr-2" 
                           style="margin-top: 5px;" 
                           id="action-checkbox-@process.ProcessId" 
                           @onclick='() => CheckCheckbox("action-checkbox-", process.ProcessId)'
                        /> @process.Client
                </td>
                <td>@process.Robot</td>
                <td class="task-descr">@(process.TaskDescription.Length > 25 ? process.TaskDescription.Substring(0, 25) + "..." : process.TaskDescription)</td>
                <td>@process.StartTime</td>
                <td>@process.ElapsedTime</td>
                <td><span class="status">@(process.Status.Length > 10 ? process.Status.Substring(0, 10) + "..." : process.Status)</span></td>
                <td><span class="efficiency">@(process.Efficiency.Length > 10 ? process.Efficiency.Substring(0, 10) + "..." : process.Efficiency)</span></td>
                <td><span class="priority">@(process.Priority.Length > 10 ? process.Priority.Substring(0, 10) + "..." : process.Priority)</span></td>
            </tr>
            }
        </tbody>
    </table>
</div>
}
<div class="flex bg-white row-border-bottom overflow-hidden">
    <div class="show-results icon">
        Show: <span>@pageSize Results </span>
    </div>
    <div class="flex pagination-buttons justify-content-center overflow-hidden">
        <button class="btn ml-1 page-btn page-btn-left" @onclick="PaginateLeft"></button>
        <div class="overflow-hidden position-relative" id=@paginationDivId style="white-space: nowrap;">
            @for (var i = 1; i <= totalPages - lastPages; i++)
            {
                var pageIndex = i;

                <button class="btn page-btn
                @(pageIndex == 1 ? "" : "ml-1")
                @(currentPage == pageIndex ? "page-btn-active" : "")
                @(hiddenButtons >= pageIndex ? "hide-previous-page" : "")"
                        @onclick="() => PaginatePageHideButtons(pageIndex)">
                    @i
                </button>
            }
        </div>
        @if (paginationButtonsSlideLeftState)
        {
            <span class="ml-1" style="color: #adadad;">..</span>
            @for (var i = totalPages - (lastPages - 1); i <= totalPages; i++)
            {
                var pageIndex = i;
                <button class="btn page-btn
                    @(currentPage == i ? "page-btn-active" : "")"
                        @onclick="() => PaginatePageHideButtons(pageIndex)">
                    @i
                </button>
            }
        }
        <button class="btn ml-1 page-btn" @onclick="PaginateRight">></button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<int> SetPage { get; set; }
    [Parameter]
    public EventCallback<int> SetPageSize { get; set; }
    [Parameter]
    public EventCallback<int> SetCurrentPage { get; set; }
    [Parameter]
    public EventCallback CheckTableDivOverflow { get; set; }
    [Parameter]
    public List<GetAllBacklogItemsCommandModel> items { get; set; }
    [Parameter]
    public List<GetAllProcessesCommandModel> processes { get; set; }
    [Parameter]
    public string title { get; set; }
    [Parameter]
    public string paginationDivId { get; set; }
    [Parameter]
    public int page { get; set; }
    [Parameter]
    public int pageSize { get; set; }
    [Parameter]
    public int currentPage { get; set; }
    [Parameter]
    public int totalPages { get; set; }
    [Parameter]
    public bool paginationDivOverflow { get; set; }
    [Parameter]
    public bool paginationButtonsSlideLeftState { get; set; }
    [Parameter]
    public bool paginationButtonsSlideRightState { get; set; }
    [Parameter]
    public int lastPages { get; set; }

    private int hiddenButtons { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task PaginatePage(int pageIndex)
    {
        if (page != pageIndex)
        {
            await Task.Run(() =>
            {
                page = pageIndex;
            });
            await SetPaginationData();
            StateHasChanged();
        }
    }

    private async Task PaginateRight()
    {
        if (page < totalPages)
        {
            await HideButtons();
            await Task.Run(() =>
            {
                page = currentPage + 1;
            });
            await SetPaginationData();
            StateHasChanged();
        }
    }

    private async Task PaginateLeft()
    {
        if (page != 1)
        {
            await ShowButtons();
            await Task.Run(() =>
            {

                page = currentPage - 1;
            });
            await SetPaginationData();
            StateHasChanged();
        }
    }

    internal protected async Task SetPaginationData()
    {
        await SetPage.InvokeAsync(page);
        await SetPageSize.InvokeAsync(pageSize);
        await SetCurrentPage.InvokeAsync(currentPage);
    }

    private async Task CheckCheckbox(string idString, int idNumber)
    {
        await Task.Run(() =>
        {
            var id = (idString + idNumber).ToString();
            Console.WriteLine(id);
        });
    }

    private async Task ShowButtons()
    {
        await Task.Run(() =>
        {
            if (hiddenButtons == currentPage - 1)
            {
                hiddenButtons -= 1;
            }
        });
        await CheckTableDivOverflow.InvokeAsync();
    }

    private async Task HideButtons()
    {
        await Task.Run(() =>
        {
            if (paginationButtonsSlideLeftState)
            {
                hiddenButtons = page;
                StateHasChanged();
            }
        });
        await CheckTableDivOverflow.InvokeAsync();
    }

    private async Task PaginatePageHideButtons(int pageIndex)
    {
        if (currentPage < pageIndex)
        {
            for (var i = currentPage; i < pageIndex; i++)
            {
                var hiddenButtonIndex = i;
                await Task.Run(() =>
                {
                    if (paginationButtonsSlideLeftState)
                    {
                        hiddenButtons = hiddenButtonIndex;
                        StateHasChanged();
                    }
                });
                await CheckTableDivOverflow.InvokeAsync();
            }

        }
        else
        {
            for (var i = currentPage; i > pageIndex; i--)
            {
                await Task.Run(() =>
                {
                    if (paginationButtonsSlideLeftState)
                    {
                        hiddenButtons = pageIndex;
                    }
                });
    
            }
        }
        await PaginatePage(pageIndex);
    }
}
