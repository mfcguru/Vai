@inject IGetAllProcessesCommand command
@inject IJSRuntime JSRuntime

<div class="flex bg-white row-border-top">
    <div class="title">ACTIONS</div>
    <div class="display-text">
        <span style="margin-top: 10px !important">Displaying @pageSize of a total 236 processes</span>
    </div>
    <div class="button-option">
        <button class="button icon float-right">Actions</button>
    </div>
    <div class="sort-by icon">
        Sort by:
        <span class="sort-by-text">Relevance</span>
    </div>
    <div class="option">...</div>
</div>
<div class="row-border" style="overflow-x:auto;width: 100%;">
    <table style="width:100%;">
        <thead class="bg-white">
            <tr>
                <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                <th scope="col">Robot</th>
                <th scope="col">Task Description</th>
                <th scope="col">Start Time</th>
                <th scope="col">Elapsed Duration</th>
                <th scope="col">Status</th>
                <th scope="col">Efficiency</th>
                <th scope="col">Priority</th>
            </tr>
        </thead>
        <tbody class="tbody">
            @foreach (var process in processes)
            {
                <tr>
                    <td style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> @process.Client</td>
                    <td>@process.Robot</td>
                    <td class="task-descr">@(process.TaskDescription.Length > 25 ? process.Status.Substring(0, 25) + "..." : process.TaskDescription)</td>
                    <td>@process.StartTime</td>
                    <td>@process.ElapsedTime</td>
                    <td><span class="status">@(process.Status.Length > 10 ? process.Status.Substring(0, 10) + "..." : process.Status)</span></td>
                    <td><span class="efficiency">@(process.Efficiency.Length > 10 ? process.Efficiency.Substring(0, 10) + "..." : process.Efficiency)</span></td>
                    <td><span class="priority">@(process.Priority.Length > 10 ? process.Priority.Substring(0, 10) + "..." : process.Priority)</span></td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="flex bg-white row-border-bottom overflow-hidden">
    <div class="show-results icon">
        Show: <span>@pageSize Results </span>
    </div>
    <div class="flex pagination-buttons justify-content-center overflow-hidden">

        <button class="btn ml-1 page-btn page-btn-left" @onclick="HandlePaginateLeft"></button>
        <div class="@(paginationDivIsOverflow ? "width-max": "") overflow-hidden position-relative">
            <!-- Imitation Element For Pagination Div Below For Detecting Overflow ( Invisible ) -->
            <div class="fake-pagination-div">
                @for (var i = 1; i <= totalPages - lastPages; i++)
                {
                    var index = i;
                    <button class="btn page-btn @(index == 1 ? "" : "ml-1")">
                        @i
                    </button>
                }
            </div>
            <!-- Original Pagination Div ( Visible ) -->
            <div id="actionPaginationDiv" style="white-space: nowrap">
                @for (var i = 1; i <= totalPages - lastPages; i++)
                {
                    var pageIndex = i;

                    <button class="btn page-btn
                @(pageIndex == 1 ? "" : "ml-1")
                @(currentPage == i ? "page-btn-active" : "")"
                            @onclick="() => HandlePageButtonClick(pageIndex)">
                        @i
                    </button>
                }
            </div>
        </div>
        @if (paginationDivIsOverflow)
        {
            <span class="ml-1" style="color: #adadad;">...</span>
            for (var i = totalPages - (lastPages - 1); i <= totalPages; i++)
            {
                var pageIndex = i;

                <button class="btn page-btn
                    @(currentPage == i ? "page-btn-active" : "")"
                        @onclick="() => HandlePageButtonClick(pageIndex)">
                    @i
                </button>
            }
        }
        <button class="btn ml-1 page-btn" @onclick="HandlePaginateRight">></button>
    </div>
</div>

@code {
    List<GetAllProcessesCommandModel> processes = new List<GetAllProcessesCommandModel>();
    private bool paginationDivIsOverflow { get; set; }
    private int page { get; set; } = 1;
    private int pageSize { get; set; } = 4;
    private int totalPages { get; set; }
    private int lastPages { get; set; }
    private int currentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        await HandleGetAllProcesses();
        await HandlePaginationDivOverflow();
    }

    private async Task HandlePageButtonClick(int pageIndex)
    {
        await Task.Run(() =>
        {
            page = pageIndex;
        });
        await HandleGetAllProcesses();
    }

    [JSInvokable("HandlePaginationDivOverflow")]
    public async Task HandlePaginationDivOverflow()
    {
        var state = await JSRuntime.InvokeAsync<bool>("checkTablePaginationDivOverflow", "actionPaginationDiv");
        await Task.Run(() =>
        {
            paginationDivIsOverflow = state;
        });
        Console.WriteLine(paginationDivIsOverflow);

        if (paginationDivIsOverflow)
        {
            lastPages = 3;
        }
        else
        {
            lastPages = 0;
        }
        Console.WriteLine(paginationDivIsOverflow);
        StateHasChanged();
    }

    private async Task HandlePaginateRight()
    {
        await Task.Run(() =>
        {
            page = currentPage + 1;
        });
        await HandleGetAllProcesses();
    }

    private async Task HandlePaginateLeft()
    {
        await Task.Run(() =>
        {
            page = currentPage - 1;
        });
        await HandleGetAllProcesses();
    }

    private async Task HandleGetAllProcesses()
    {
        var result = await command.Execute(new GetAllProcessesCommandParams { Page = page, PageSize = pageSize });
        processes = result.Data;
        currentPage = result.CurrentPage;
        totalPages = 15;
    }
}
