@inject IGetAllBacklogItemsCommand command
@inject IJSRuntime JSRuntime

<div class="flex bg-white row-border-top mt-3">
    <div class="title">@title</div>
    <div class="display-text">
        <span style="margin-top: 10px !important">Displaying @pageSize of a total 236 processes</span>
    </div>
    <div class="button-option">
        <button class="button icon float-right">Actions</button>
    </div>
    <div class="sort-by icon">
        Sort by:
        <span class="sort-by-text">Relevance</span>
    </div>
    <div class="option">...</div>
</div>
<div class="row-border" style="overflow-x:auto;width: 100%;">
    <table style="width: 100%">
        <thead class="bg-white">
            <tr>
                <th scope="col" style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> Client</th>
                <th scope="col">Robot</th>
                <th scope="col">Task Description</th>
            </tr>
        </thead>
        <tbody class="tbody">
            @foreach (var item in items)
            {
                <tr>
                    <td style="display: flex"><input type="checkbox" class="form-check mr-2" style="margin-top: 5px;" /> @item.Client</td>
                    <td>@item.Robot</td>
                    <td class="task-descr">@(item.TaskDescription.Length > 35 ? item.TaskDescription.Substring(0, 35) + "..." : item.TaskDescription)</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="flex bg-white row-border-bottom overflow-hidden">
    <div class="show-results icon">
        Show: <span>@pageSize Results </span>
    </div>
    <div class="flex pagination-buttons justify-content-center overflow-hidden">
        <button class="btn ml-1 page-btn page-btn-left" @onclick="PaginateLeft"></button>
        <div class="overflow-hidden" id=@paginationDivId style="white-space: nowrap">
            @for (var i = 1; i <= totalPages - lastPages; i++)
            {
                var pageIndex = i;
                <button class="btn page-btn
                    @(pageIndex == 1 ? "": "ml-1")
                    @(currentPage == i ? "page-btn-active" : "")"
                        @onclick="() => PaginatePage(pageIndex)">
                    @i
                </button>
            }
        </div>
        @if (paginationDivIsOverflow)
        {
            <span class="ml-1" style="color: #adadad;">...</span>
            @for (var i = totalPages - (lastPages - 1); i <= totalPages; i++)
            {
                var pageIndex = i;
                <button class="btn page-btn
                @(currentPage == i ? "page-btn-active" : "")"
                        @onclick="() => PaginatePage(pageIndex)">
                    @i
                </button>
            }
        }
        <button class="btn ml-1 page-btn" @onclick="PaginateRight">></button>
    </div>
</div>

@code {
    [Parameter]
    public List<GetAllBacklogItemsCommandModel> items { get; set; }
    [Parameter]
    public EventCallback<int> InvokePage { get; set; }
    [Parameter]
    public EventCallback<int> InvokePageSize { get; set; }
    [Parameter]
    public EventCallback<int> InvokeCurrentPage { get; set; }
    [Parameter]
    public string title { get; set; }
    [Parameter]
    public string paginationDivId { get; set; }
    [Parameter]
    public int page { get; set; }
    [Parameter]
    public int pageSize { get; set; }
    [Parameter]
    public int currentPage { get; set; }
    [Parameter]
    public int totalPages { get; set; }

    private bool paginationDivIsOverflow { get; set; }
    private int lastPages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("SetBacklogReference", lDotNetReference);
        await HandlePaginationDivOverflow();
    }

    [JSInvokable("HandlePaginationDivOverflow")]
    public async Task HandlePaginationDivOverflow()
    {
        var state = await JSRuntime.InvokeAsync<bool>("checkTablePaginationDivOverflow", paginationDivId);
        await Task.Run(() =>
        {
            paginationDivIsOverflow = state;
        });

        if (paginationDivIsOverflow)
        {
            lastPages = 3;
        }
        else
        {
            lastPages = 0;
        }
        StateHasChanged();
    }

    private async Task PaginatePage(int pageIndex)
    {
        await Task.Run(() =>
        {
            page = pageIndex;
        });
        await PaginationButtonsChanged(page);
        await HandleSetPaginationData();
    }

    private async Task PaginateRight()
    {
        await Task.Run(() =>
        {
            if (currentPage < totalPages)
            {
                page = currentPage + 1;
            }
        });
        await PaginationButtonsChanged(page);
        await HandleSetPaginationData();
    }

    private async Task PaginateLeft()
    {
        await Task.Run(() =>
        {
            if (currentPage > 1)
            {
                page = currentPage - 1;
            }
        });
        await PaginationButtonsChanged(page);
        await HandleSetPaginationData();
    }

    private async Task PaginationButtonsChanged(int pageIndex)
    {
        await Task.Run(() =>
        {

        });
    }

    public async Task HandleSetPaginationData ()
    {
        await InvokePage.InvokeAsync(page);
        await InvokePageSize.InvokeAsync(pageSize);
        await InvokeCurrentPage.InvokeAsync(currentPage);
    }
}
